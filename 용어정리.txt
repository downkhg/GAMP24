*실습해본 내용을 바탕으로 이해한것만 적어보기

[프로그래밍기초]
복사:
참조:

알고리즘:
데이터:

배열:
ㄴ인덱스:
ㄴ포인터연산:
ㄴ배열복사:
ㄴㄴ메모리복사:
ㄴ2차원배열:

16진법:
참조에의한호출:
값에의한호출:
포인터에의한호출:

NULL:
배열:
연산자:
전위연산자:
후위연산자:
포인터:
참조자:

동작할당:
정적할당:
ㄴ지역변수:
ㄴ매개변수:
ㄴ전역변수:

[자료구조] 컴퓨터에 데이터를 저장하는 구조(연결리스트,트리,그래프)
연결리스트: 자료의 다음에 다음주소값을 가지고 있어 물리적으로 연결되어 있지않더라도 개수를 늘릴수있다.
노드: 자료구조에 데이터를 저장하는 구조체
삽입:
삭제:
찾기:
모두삭제:

공간의복잡도: 메모리사용양. RAM얼마나 사용하느냐.
시간의복잡도: 얼마나 빠르게 처리하느냐. CPU작업 속도
점근식표기법: 얼마나 빠르게 처리하느냐를 표기하는 방법.
ㄴO(n): 데이터가 100개가 있다면, 100개중 1개를 찾는데 가장오래걸리는 것은 100번째다.
ㄴO(1): 데이터를 1번만에 찾을수있다.

선형자료구조:
연결리스트: 자료의 다음에 다음주소값을 가지고 있어 물리적으로 연결되어 있지않더라도 개수를 늘릴수있다.
ㄴ단일연결리스트

ㄴ이중연결리스트
ㄴ환형연결리스트
ㄴ큐
ㄴ스택
ㄴ데크
비선형자료구조: 선의형태로 연결되어있지않은 자료구조
ㄴ트리: 트리구조로 데이터를 저장한다.
ㄴ재귀구조: 함수에서 함수를 호출해 이전상태로 쉽게 돌아갈수있다. 반대로 반복횟수가 많다면 스택오버플로우를 발생시킬수있다.
ㄴㄴ힙트리:
ㄴㄴ레드블랙이진트리:
ㄴㄴAVL이진트리:
ㄴㄴ순회:
ㄴ그래프: 노드의 연결 상태를 나타내며 주로 최소거리를 계산 할때 활용한다.
ㄴㄴBFS:
ㄴㄴDFS:
ㄴㄴ다익스트라:
ㄴㄴA*:
ㄴㄴ벨만포드:

ㄴ해시테이블: 해시함수를 사용하여 버킷에 접근하기때문에 평균적인 접근속도가 O(1), 최악은 O(n)

STL: C++에서 지원하는 기본 자료구조 라이브러리.
ㄴ컨테이너:
ㄴㄴlist: 이중연결리스트 이터레이터를 통해, 앞의 이터레이터나 뒤의 이터레이터를 접근가능하다.
ㄴㄴvector: 동적배열. 자료가 정렬되어있다면 0(1)의 값으로 접근가능하다. 데이터의 추가나 삭제에 적절하지않다.
ㄴㄴdeque:
ㄴㄴstack:
ㄴㄴqueue:
ㄴㄴstack:
ㄴㄴmap:
ㄴㄴset:
ㄴㄴunorderedmap(hash-map):
ㄴ이테리이터:
ㄴ알고리즘: 컨테이터가 공통으로 데이터를 처리하기위해 만들어진 함수라이브러리, 보통 이터레이터의 사작과 끝을 넣어서 알고리즘을 작동시킨다. 예) find

정렬: 오름차순으로 데이터를 정렬하는것. 다양한 알고리즘이 있고, 이를 적절히 잘활용하는것이 중요하다.


[메모리]
스택영역:
ㄴ호출스택: 함수가 호출되어 각각의 스택에 쌓은 데이터를 확인할수있는 디버거
힙힙역:

