*실습해본 내용을 바탕으로 이해한것만 적어보기

[프로그래밍기초]
복사:
참조:

알고리즘:
데이터:

배열:
ㄴ인덱스:
ㄴ포인터연산:
ㄴ배열복사:
ㄴㄴ메모리복사:
ㄴ2차원배열:

16진법:
참조에의한호출:
값에의한호출:
포인터에의한호출:

NULL:
배열:
연산자:
전위연산자:
후위연산자:
포인터:
참조자:

동작할당: 빌드가된 이후에 메모리가 할당되므로, 컴파일러에의해서 스케쥴링이 불가능하다. 
그러므로 메모리가 필요없을때 delete를 호출하여 직접 메모리를 삭제해줘야한다.
정적할당: 메모리가 삭제되는 시기를 지정하여 컴파일러가 스케쥴링한다.
ㄴ지역변수: 함수내부에서만 존제하는 변수.
ㄴ매개변수: 함수에 전달되는 값을 전달하위한 변수.
ㄴ전역변수: 어떤 함수에서든 접근가능한 함수. main보다 위에 선언됨. 어떤 함수에도 소속되어있지않으므로, 프로그램이 종료될때까지 유지되는 변수.

스마트포인터: 동적할당된 메모리를 자동으로 관리해주는 객체.
ㄴ유니크포인터: 할당된 대상의 메모리가 1개만 존재하도록 강제하는 포인터. 싱글톤구조를 가짐.
ㄴ쉐이드포인터: 할당된 대상의 메모리를 참조할 수있는 메모리. 메모리의 참조수를 카운팅해 참조값의 수가 0이되면 삭제된다.
ㄴ위크니스포인터: 할당된 대상의 메모리를 느슨하게 관리하는 포인터. 멀티스레드환경에서 정확한 절차에 따라 언제 삭제될지 알수없는 메모리에 사용.
가비지컬럭터: 동적할당된 메모리를 자동으로 관리해주는 개념.

[객체지향]
생성자: 객체가 생성될때 자동으로 호출되는 함수. 주로 맴버내의 객체를 초기화하는 기능을 포함한다.
소멸자: 객체가 소멸될때 호출되는 함수. 동적할된 객체가 있다면 주로 삭제하는 기능을 당담합니다.(단일책임원칙)
private: 객체외부에서 멤버를 접근할수없게 만드는 기능. 생성자와 소멸자를 priavte외부에서 객체생성을 금지하도록 강제함.
public: 객체외부에서 멤버를 접근할수있게한다. 외부에서 사용해야하는 api를 선언할때 주로 활용한다.
상속(is A): 부모의 클래스를 상속받아서 추가적인 멤버만 구현하는 것.
포함(has A): 클래스 내부에 클래스나 구조체를 가지는 것. 모듈화가 가능하지만, 각 객체에 엑세스하는 변수를 추가적으로 구현해야한다.
캡슐화: 속성과 동작을 묶어 하나의 대상을 나타내는 것
ㄴ속성(변수):
ㄴ동작(함수):
은닉:
상속:
다형성:


[자료구조] 컴퓨터에 데이터를 저장하는 구조(연결리스트,트리,그래프)
연결리스트: 자료의 다음에 다음주소값을 가지고 있어 물리적으로 연결되어 있지않더라도 개수를 늘릴수있다.
노드: 자료구조에 데이터를 저장하는 구조체
삽입:
삭제:
찾기:
모두삭제:

공간의복잡도: 메모리사용양. RAM얼마나 사용하느냐.
시간의복잡도: 얼마나 빠르게 처리하느냐. CPU작업 속도
점근식표기법: 얼마나 빠르게 처리하느냐를 표기하는 방법.
ㄴO(n): 데이터가 100개가 있다면, 100개중 1개를 찾는데 가장오래걸리는 것은 100번째다.
ㄴO(1): 데이터를 1번만에 찾을수있다.

선형자료구조:
연결리스트: 자료의 다음에 다음주소값을 가지고 있어 물리적으로 연결되어 있지않더라도 개수를 늘릴수있다.
ㄴ단일연결리스트

ㄴ이중연결리스트
ㄴ환형연결리스트
ㄴ큐
ㄴ스택
ㄴ데크
비선형자료구조: 선의형태로 연결되어있지않은 자료구조
ㄴ트리: 트리구조로 데이터를 저장한다.
ㄴ재귀구조: 함수에서 함수를 호출해 이전상태로 쉽게 돌아갈수있다. 반대로 반복횟수가 많다면 스택오버플로우를 발생시킬수있다.
ㄴㄴ힙트리:
ㄴㄴ레드블랙이진트리:
ㄴㄴAVL이진트리:
ㄴㄴ순회:
ㄴ그래프: 노드의 연결 상태를 나타내며 주로 최소거리를 계산 할때 활용한다.
ㄴㄴBFS:
ㄴㄴDFS:
ㄴㄴ다익스트라:
ㄴㄴA*:
ㄴㄴ벨만포드:

ㄴ해시테이블: 해시함수를 사용하여 버킷에 접근하기때문에 평균적인 접근속도가 O(1), 최악은 O(n)

STL: C++에서 지원하는 기본 자료구조 라이브러리.
ㄴ컨테이너:
ㄴㄴlist: 이중연결리스트 이터레이터를 통해, 앞의 이터레이터나 뒤의 이터레이터를 접근가능하다.
ㄴㄴvector: 동적배열. 자료가 정렬되어있다면 0(1)의 값으로 접근가능하다. 데이터의 추가나 삭제에 적절하지않다.
ㄴㄴdeque:
ㄴㄴstack:
ㄴㄴqueue:
ㄴㄴstack:
ㄴㄴmap:
ㄴㄴset:
ㄴㄴunorderedmap(hash-map):
ㄴ이테리이터:
ㄴ알고리즘: 컨테이터가 공통으로 데이터를 처리하기위해 만들어진 함수라이브러리, 보통 이터레이터의 사작과 끝을 넣어서 알고리즘을 작동시킨다. 예) find

정렬: 오름차순으로 데이터를 정렬하는것. 다양한 알고리즘이 있고, 이를 적절히 잘활용하는것이 중요하다.


[메모리]
스택영역:
ㄴ호출스택: 함수가 호출되어 각각의 스택에 쌓은 데이터를 확인할수있는 디버거
힙힙역:
